name: EditMode CI (Self-Hosted)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  editmode-tests:
    name: Unity EditMode Tests (Self-Hosted)
    runs-on: [self-hosted, Windows]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Allow PowerShell scripts only for THIS job (no machine-wide change)
      - name: Allow PowerShell in this job
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      # Read the Unity version from ProjectSettings/ProjectVersion.txt
      - name: Read Unity version from ProjectVersion.txt
        id: unityver
        shell: powershell
        run: |
          $pv = Get-Content "ProjectSettings/ProjectVersion.txt" -ErrorAction Stop |
                Where-Object { $_ -match 'm_EditorVersion:\s*(.+)$' } |
                ForEach-Object { $Matches[1].Trim() }
          if (-not $pv) { Write-Error "Could not read Unity version from ProjectVersion.txt"; exit 1 }
          "UNITY_VERSION=$pv" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Unity version: $pv"

      # Locate Unity.exe for the detected version.
      # Fast path: check Hub's standard locations on every fixed drive (C:, D:, ...).
      # Fallback: one-time search, then cache the result to avoid future scans.
      - name: Locate Unity.exe
        shell: powershell
        run: |
          $version = "${{ env.UNITY_VERSION }}"
          $cacheFile = Join-Path $Env:RUNNER_TEMP "unity_exe_path.txt"

          # If we have a cached path for this version and it still exists, reuse it
          if (Test-Path $cacheFile) {
            $cached = Get-Content $cacheFile | Select-Object -First 1
            if ($cached -and (Test-Path $cached) -and ($cached -match [regex]::Escape($version))) {
              "UNITY_EXE=$cached" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
              Write-Host "Using cached Unity path: $cached"
              exit 0
            }
          }

          $unityExe = $null

          # All fixed drives (C:, D:, â€¦)
          $drives = Get-PSDrive -PSProvider FileSystem | Where-Object { $_.Free -ne $null } | Select-Object -ExpandProperty Root

          # Check common Hub locations first (very fast)
          foreach ($root in $drives) {
            foreach ($pf in @("Program Files","Program Files (x86)")) {
              $candidate = Join-Path $root "$pf/Unity/Hub/Editor/$version/Editor/Unity.exe"
              if (Test-Path $candidate) { $unityExe = $candidate; break }
            }
            if ($unityExe) { break }
          }

          # Fallback: targeted search for Unity.exe that contains the version in its path (runs once, then cached)
          if (-not $unityExe) {
            foreach ($root in $drives) {
              $hit = Get-ChildItem -Path $root -Filter Unity.exe -File -Recurse -ErrorAction SilentlyContinue |
                     Where-Object { $_.FullName -match [regex]::Escape($version) } |
                     Select-Object -First 1
              if ($hit) { $unityExe = $hit.FullName; break }
            }
          }

          if (-not $unityExe) {
            Write-Error "Unity $version not found on this runner. Install it via Unity Hub."
            exit 1
          }

          # Cache and export
          Set-Content -Path $cacheFile -Value $unityExe -Encoding UTF8
          "UNITY_EXE=$unityExe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Found Unity: $unityExe"

      # Make a clean results folder
      - name: Prepare workspace (cmd)
        shell: cmd
        run: |
          if exist "%CD%\TestResults" rmdir /s /q "%CD%\TestResults"
          mkdir "%CD%\TestResults"

      # Run EditMode tests
      - name: Run Unity EditMode Tests (cmd)
        shell: cmd
        run: |
          if not exist "%UNITY_EXE%" (
            echo Unity not found at "%UNITY_EXE%"
            exit /b 1
          )
          "%UNITY_EXE%" -batchmode -nographics -quit ^
            -projectPath "%CD%" ^
            -logfile "%CD%\TestResults\EditModeLog.txt" ^
            -runTests -testPlatform EditMode ^
            -testResults "%CD%\TestResults\EditModeResults.xml"

      # Upload results
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: EditModeResults
          path: TestResults/
