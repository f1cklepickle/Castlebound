name: EditMode CI (Self-Hosted)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  editmode-tests:
    name: Unity EditMode Tests (Self-Hosted)
    runs-on: [self-hosted, Windows]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Unity and export path (cmd only)
        shell: cmd
        run: |
          setlocal enableextensions enabledelayedexpansion

          if not exist "ProjectSettings\ProjectVersion.txt" (
            echo ERROR: ProjectSettings\ProjectVersion.txt not found.
            exit /b 1
          )
          set "VERLINE="
          for /f "usebackq tokens=* delims=" %%L in ("ProjectSettings\ProjectVersion.txt") do (
            echo %%L | findstr /b /c:"m_EditorVersion:" >nul && set "VERLINE=%%L"
          )
          if not defined VERLINE (
            echo ERROR: m_EditorVersion not found in ProjectVersion.txt
            exit /b 1
          )

          for /f "tokens=2 delims= " %%V in ("!VERLINE!") do set "UNITY_VERSION_RAW=%%V"
          set "UNITY_VERSION_CLEAN=!UNITY_VERSION_RAW!"
          for /f "tokens=1 delims=fFbBpP" %%A in ("!UNITY_VERSION_CLEAN!") do set "UNITY_VERSION_CLEAN=%%A"
          if /i "!UNITY_VERSION_CLEAN:~-2!"==".x" set "UNITY_VERSION_CLEAN=!UNITY_VERSION_CLEAN:~0,-2!"
          for /f "tokens=1,2 delims=." %%A in ("!UNITY_VERSION_CLEAN!") do set "SERIES=%%A.%%B."

          set "UNITY_EXE="

          for %%R in (
            "C:\Program Files\Unity\Hub\Editor"
            "D:\Program Files\Unity\Hub\Editor"
            "E:\Program Files\Unity\Hub\Editor"
            "C:\Program Files\Unity"
            "D:\Program Files\Unity"
            "E:\Program Files\Unity"
          ) do (
            if not defined UNITY_EXE if exist "%%~R\!UNITY_VERSION_RAW!\Editor\Unity.exe" set "UNITY_EXE=%%~R\!UNITY_VERSION_RAW!\Editor\Unity.exe"
            if not defined UNITY_EXE if exist "%%~R\!UNITY_VERSION_CLEAN!\Editor\Unity.exe" set "UNITY_EXE=%%~R\!UNITY_VERSION_CLEAN!\Editor\Unity.exe"
          )

          if not defined UNITY_EXE if defined SERIES (
            for %%R in (
              "C:\Program Files\Unity\Hub\Editor"
              "D:\Program Files\Unity\Hub\Editor"
              "E:\Program Files\Unity\Hub\Editor"
            ) do (
              if not defined UNITY_EXE if exist "%%~R\!SERIES!*" (
                for /f "delims=" %%P in ('dir /b /ad "%%~R\!SERIES!*" 2^>nul') do (
                  if not defined UNITY_EXE if exist "%%~R\%%P\Editor\Unity.exe" (
                    set "UNITY_EXE=%%~R\%%P\Editor\Unity.exe"
                    goto :found
                  )
                )
              )
            )
          )

          if not defined UNITY_EXE (
            for /f %%D in ('wmic logicaldisk where "drivetype=3" get deviceid ^| find ":"') do (
              if not defined UNITY_EXE (
                for /f "delims=" %%P in ('dir /b /s "%%D\*\!UNITY_VERSION_RAW!\Editor\Unity.exe" 2^>nul') do (
                  set "UNITY_EXE=%%P"
                  goto :found
                )
              )
              if not defined UNITY_EXE (
                for /f "delims=" %%P in ('dir /b /s "%%D\*\!UNITY_VERSION_CLEAN!\Editor\Unity.exe" 2^>nul') do (
                  set "UNITY_EXE=%%P"
                  goto :found
                )
              )
              if not defined UNITY_EXE if defined SERIES (
                for /f "delims=" %%P in ('dir /b /s "%%D\*\!SERIES!*\Editor\Unity.exe" 2^>nul') do (
                  set "UNITY_EXE=%%P"
                  goto :found
                )
              )
            )
          )
          :found

          if not defined UNITY_EXE (
            echo ERROR: Unity !UNITY_VERSION_RAW! not found on this runner. Install via Unity Hub.
            exit /b 1
          )

          echo Found UNITY_EXE=!UNITY_EXE!
          echo UNITY_EXE=!UNITY_EXE!>>"%GITHUB_ENV%"

      - name: Prepare workspace (cmd)
        shell: cmd
        run: |
          if exist "%GITHUB_WORKSPACE%\TestResults" rmdir /s /q "%GITHUB_WORKSPACE%\TestResults"
          mkdir "%GITHUB_WORKSPACE%\TestResults"

      - name: Run Unity EditMode Tests (cmd)
        shell: cmd
        run: |
          "%UNITY_EXE%" -batchmode -nographics -quit ^
            -projectPath "%GITHUB_WORKSPACE%" ^
            -logfile "%GITHUB_WORKSPACE%\TestResults\EditModeLog.txt" ^
            -runTests -testPlatform EditMode ^
            -testResults "%GITHUB_WORKSPACE%\TestResults\EditModeResults.xml;format=nunit3"
          echo UNITY_EXITCODE=%ERRORLEVEL%>>"%GITHUB_ENV%"

      - name: List TestResults folder (debug)
        shell: cmd
        run: |
          echo Listing %GITHUB_WORKSPACE%\TestResults
          if exist "%GITHUB_WORKSPACE%\TestResults" (
            dir "%GITHUB_WORKSPACE%\TestResults"
          ) else (
            echo (TestResults folder missing)
          )

      - name: Summarize + enforce results
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'

          $results   = Join-Path $env:GITHUB_WORKSPACE 'TestResults\EditModeResults.xml'
          $logPath   = Join-Path $env:GITHUB_WORKSPACE 'TestResults\EditModeLog.txt'
          $unityExit = [int]$env:UNITY_EXITCODE

          # Fallback to Unity's default Editor.log if our custom logfile wasn't created
          if (-not (Test-Path $logPath) -and $env:LOCALAPPDATA) {
            $defaultEditorLog = Join-Path $env:LOCALAPPDATA 'Unity\Editor\Editor.log'
            if (Test-Path $defaultEditorLog) { $logPath = $defaultEditorLog }
          }

          if (-not (Test-Path $results)) {
            $tailLines = if (Test-Path $logPath) { Get-Content $logPath -Tail 200 -ErrorAction SilentlyContinue } else { @('No EditModeLog.txt found.') }
            $quotedTail = ($tailLines | ForEach-Object { '> ' + $_ }) -join "`n"

            @"
# ❌ No NUnit XML produced

Tried: TestResults\EditModeResults.xml  
**Unity ExitCode:** $unityExit

## Log Tail (last 200 lines)
$quotedTail
"@ | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            exit 1
          }

          [xml]$xml = Get-Content $results
          $root     = $xml.'test-run'
          $total    = [int]$root.total
          $passed   = [int]$root.passed
          $failed   = [int]$root.failed
          $skipped  = [int]$root.skipped
          $duration = [string]$root.duration

          @"
# 🧪 EditMode Test Summary

**Total:** $total  |  **Passed:** $passed  |  **Failed:** $failed  |  **Skipped:** $skipped

**Duration (s):** $duration  
**Unity ExitCode:** $unityExit

> Results file: TestResults/EditModeResults.xml
"@ | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

          if ($total -eq 0)  { Write-Error "Discovered 0 tests."; exit 1 }
          if ($failed -gt 0) { Write-Error ("{0} tests failed." -f $failed); exit 1 }
          if ($unityExit -ne 0) { Write-Error ("Unity exit code {0}." -f $unityExit); exit 1 }

      - name: Upload Test Results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: EditModeResults
          path: |
            ${{ github.workspace }}\TestResults\EditModeResults.xml
            ${{ github.workspace }}\TestResults\EditModeLog.txt
          if-no-files-found: warn
